<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_LogHandler" Id="{3f56ea05-5d12-4cf3-aa32-b1078ff3baf8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LogHandler
VAR_INPUT
	
	{attribute 'pytmc' := '
		pv: ADS
	'}
	fbTcAdsListener : FB_Listener;	
	
	{attribute 'pytmc' := '
		pv: Router
	'}
	fbTcRouterListener : FB_Listener;
	
	{attribute 'pytmc' := '
		pv: RTime
	'}
	fbTcRTimeListener : FB_Listener;	
	
	{attribute 'pytmc' := '
		pv: System
	'}
	fbTcSystemListener : FB_Listener;
	
	{attribute 'pytmc' := '
		pv: Windows
	'}
	fbWindowsListener : FB_Listener;	

	{attribute 'pytmc' := '
		pv: LCLS
	'}
	fbLCLSListener 	: FB_Listener;	

END_VAR
VAR_OUTPUT
END_VAR

VAR
	
	bInitialized	:	BOOL	:= FALSE;
	bReadyToLog		: 	BOOL	:= FALSE;
	rtFirstLog		: 	R_TRIG;
	
	fbGetHostName		:	FB_GetHostName := (bExecute := TRUE, sNetID := ''); //Acquires name of the PLC
    fbGetAdapterIP : FB_GetAdaptersInfo := (bExecute := TRUE, sNetID := ''); // Acquire IP of the correct adapter
	bHostnameSet	:	BOOL	:= FALSE;
    idxPortFind : UDINT;

	fbListener		:	REFERENCE TO FB_Listener;
	fbListeners		: 	ARRAY [0..nNumListeners - 1] OF POINTER TO FB_Listener;
	
	// Default minimum severity for subscriptions
	eMinSeverity	:	TcEventSeverity := TcEventSeverity.Verbose;	
	
	{attribute 'naming' := 'omit'}
	rtReset				:	R_TRIG; //Reset trigger
	bReset				:	BOOL;
		
	fbSocket	   		:	FB_ConnectionlessSocket;
	
	nI					:	UINT;
    
    SocketEnable : BOOL;
    
    bAdapterSet : BOOL;
    
    ctuSocketError : CTU := (PV:=3); // Circuit breaker for socket errors. 3 errors before it stops.
    
    tRetryConnection : TON := (PT:=T#1h); // Retry after an hour
    
    tonTrickleBreaker : TON := (PT := T#10s);
    tofTrickleBreaker : TOF := (PT := T#10s);
    bTripCon : BOOL;
END_VAR

VAR CONSTANT
	nNumListeners		:	UINT	:= 6;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN 
	bInitialized := TRUE;
	fbTcAdsListener.Configure(i_EventClass:=TC_EVENT_CLASSES.TcGeneralAdsEventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));
	fbTcRouterListener.Configure(i_EventClass:=TC_EVENT_CLASSES.TcRouterEventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));
	fbTcRTimeListener.Configure(i_EventClass:=TC_EVENT_CLASSES.TcRTimeEventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));
	fbTcSystemListener.Configure(i_EventClass:=TC_EVENT_CLASSES.TcSystemEventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));
	fbWindowsListener.Configure(i_EventClass:=TC_EVENT_CLASSES.Win32EventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));
	fbLCLSListener.Configure(i_EventClass:=TC_EVENT_CLASSES.LCLSGeneralEventClass, i_MinSeverity:=eMinSeverity, i_fbSocket:=ADR(fbSocket));

	fbListeners[0] := ADR(fbTcAdsListener);
	fbListeners[1] := ADR(fbTcRouterListener);
	fbListeners[2] := ADR(fbTcRTimeListener);
	fbListeners[3] := ADR(fbTcSystemListener);
	fbListeners[4] := ADR(fbWindowsListener);
	fbListeners[5] := ADR(fbLCLSListener);
    
END_IF 
	
IF NOT bHostnameSet THEN
	fbGetHostName();
	IF NOT (fbGetHostName.bBusy OR fbGetHostName.bError) THEN
		GVL_Logger.sPlcHostname := fbGetHostName.sHostName;
		bHostnameSet 			:= TRUE;
	END_IF
END_IF

IF NOT bAdapterSet THEN
    fbGetAdapterIP();
    IF NOT (fbGetAdapterIP.bBusy or fbGetAdapterIP.bError) THEN
        FOR idxPortFind := 0 TO MAX_LOCAL_ADAPTERS DO
            IF FIND(fbGetAdapterIP.arrAdapters[idxPortFind].sIpAddr,
               GVL_Logger.sIpTidbit) <> 0 THEN
                fbSocket.sLocalHost := fbGetAdapterIP.arrAdapters[idxPortFind].sIpAddr;
                SocketEnable := TRUE;
                bAdapterSet := TRUE;
                EXIT;
            END_IF
        END_FOR
    END_IF
END_IF

(* Ensure the socket is ready for when JSON documents are emitted *)
rtReset(CLK:=bReset);

IF (rtReset.Q AND fbSocket.bEnable) THEN
	fbSocket(bEnable:=FALSE);
END_IF

// Disable fbSocket if too many errors occur
ctuSocketError(CU:=fbSocket.bError, RESET:=tRetryConnection.Q OR rtReset.Q);
SocketEnable R= ctuSocketError.Q;
// Retry an hour later
tRetryConnection(IN:=ctuSocketError.Q);
SocketEnable S= tRetryConnection.Q OR rtReset.Q;

fbSocket(
	nLocalPort:=0,
	bEnable:=SocketEnable,
	nMode:=CONNECT_MODE_ENABLEDBG,
);

bReadyToLog := (bAdapterSet AND bHostnameSet AND bInitialized AND 
                fbSocket.bEnable AND NOT fbSocket.bError);
rtFirstLog(CLK:=bReadyToLog);

IF rtFirstLog.Q THEN
    fbRootLogger(sMsg:='Logging system online', eSevr:=TcEventSeverity.Info,
                 eSubsystem:=E_Subsystem.NILVALUE);
END_IF

// Global log circuit breaker
// Trip if the ton and toff fire
bTripCon := GVL_Logger.nGlobAccEvents > GVL_Logger.nTrickleThreshold;
tonTrickleBreaker(IN:=bTripCon);
tofTrickleBreaker(IN:=bTripCon);
GVL_Logger.bTrickleTripped S= tonTrickleBreaker.Q AND tofTrickleBreaker.Q;

GVL_Logger.nGlobAccEvents := 0; // reset the count for the next cycle

(* Poke all of the listeners *)
FOR nI := 0 TO nNumListeners - 1 DO
	fbListener REF= fbListeners[nI]^;
	fbListener.Execute();
	fbListener.PublishEvents();
END_FOR]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>