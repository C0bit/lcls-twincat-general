<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ECATAutoRestart" Id="{7eb4a159-5b39-429e-b4d6-be42c06ba58e}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_ECATAutoRestart
VAR_INPUT
    sNetId     : T_AmsNetId;
    nSlaveAddr : UINT;
    bEnable 	: BOOL;
END_VAR
VAR_IN_OUT
END_VAR
VAR_OUTPUT
    bError 		: BOOL;
    nErrorId	: UDINT;
END_VAR
VAR
    // FB
    fbgetSlaveState : FB_EcGetSlaveState;
    fbsetSlaveState : FB_EcSetSlaveState;
    fbTON			: TON;
    fbTP			: TP;
    bStartTON		: BOOL := TRUE;
    bStateMError	: BOOL;
    nNextState		: WORD;

    // Used by Statemachine method
    bStopTrying		: BOOL := FALSE;
    nErrorCount		: UINT := 0;
    nErrorMax		: UINT := 5;
    fbLogger		: FB_LogMessage := (eSubsystem:= E_Subsystem.FIELDBUS);



END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbTON(IN:= bStartTON OR NOT fbTON.Q, PT:= T#1s);
IF bStartTON THEN bStartTON := FALSE; END_IF
fbgetSlaveState(sNetId:=sNetId, nSlaveAddr:=nSlaveAddr,  bExecute:=fbTON.Q);

StateMachine(nCurrentState:= fbgetSlaveState.state.deviceState,
            bEnable:= bEnable,
            bSetError:= fbsetSlaveState.bError,
            bSetBusy:= fbsetSlaveState.bBusy,
            nNextState=> nNextState,
            bMaxNumTriesReached=> bStateMError,
            bSetDO=>fbTP.IN);

bError := bStateMError;
nErrorId := fbgetSlaveState.nErrId;

fbTP(PT:=T#10ms);
fbsetSlaveState(sNetId:=sNetId,
        nSlaveAddr:=nSlaveAddr,
        reqState:= nNextState,
        bExecute:=fbTP.Q);


]]></ST>
    </Implementation>
    <Method Name="StateMachine" Id="{4f307c1c-6406-4ed4-adea-e4e6e46fd62f}">
      <Declaration><![CDATA[
METHOD StateMachine

VAR_INPUT
    nCurrentState 	: WORD;
    bEnable			: BOOL;

    //Flags from FB_EcSetSlaceState
    bSetError		: BOOL;
    bSetBusy		: BOOL;

END_VAR
VAR_OUTPUT
    nNextState					: WORD;
    bMaxNumTriesReached			: BOOL;
    bSetDO						: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[bSetDO := FALSE;

IF bEnable AND  NOT bSetBusy THEN
    CASE nCurrentState OF
        EC_DEVICE_STATE_BOOTSTRAP:
            fbLogger(sMsg:='Trying to move to INIT', eSevr:=TcEventSeverity.Info);
            nNextState := EC_DEVICE_STATE_INIT;
            bSetDO := TRUE;
        EC_DEVICE_STATE_INIT:
            fbLogger(sMsg:='Trying to move to PREOP', eSevr:=TcEventSeverity.Info);
            nNextState := EC_DEVICE_STATE_PREOP;
            bSetDO := TRUE;
        EC_DEVICE_STATE_PREOP:
            fbLogger(sMsg:='Trying to move to SAVEOP', eSevr:=TcEventSeverity.Info);
            nNextState := EC_DEVICE_STATE_SAFEOP;
            bSetDO := TRUE;
        EC_DEVICE_STATE_SAFEOP:
            fbLogger(sMsg:='Trying to move to OP', eSevr:=TcEventSeverity.Info);
            nNextState := EC_DEVICE_STATE_OP;
            bSetDO := TRUE;
        EC_DEVICE_STATE_OP:
            // IN OP STATE ? RESET ERRORS?
            nNextState := EC_DEVICE_STATE_OP;
            IF bStopTrying THEN
                bStopTrying := FALSE;
                nErrorCount := 0;
            END_IF

    END_CASE

    // Keeps Track on consecutive Errors ans stop trying if max ammount of tried has been reached.
    IF bSetError AND (NOT bStopTrying) THEN
        nErrorCount := nErrorCount + 1;
        IF (nErrorCount = nErrorMax) THEN
            bStopTrying := TRUE;
        END_IF
    END_IF
END_IF

IF NOT bEnable THEN
    nNextState := nCurrentState;
END_IF

bMaxNumTriesReached := bStopTrying;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>